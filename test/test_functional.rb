require 'simplecov'
SimpleCov.start

require 'rubygems'
gem 'mocha'
require 'test/unit'
require 'mocha/test_unit'
require_relative '../lib/fis_parser'
require_relative '../lib/fuzzy_system'
include Mocha::API


class FunctionalTest < Test::Unit::TestCase

  def test_sugeno_1
    fis = %{
[System]
Name='sugeno1'
Type='sugeno'
Version=2.0
NumInputs=3
NumOutputs=1
NumRules=3
AndMethod='min'
OrMethod='max'
ImpMethod='prod'
AggMethod='sum'
DefuzzMethod='wtaver'

[Input1]
Name='Vr'
Range=[0 400]
NumMFs=3
MF1='LP':'trapmf',[65 65 70 400]
MF2='HP':'trapmf',[70 400 400 400]
MF3='Z':'trapmf',[0 0 65 65]

[Input2]
Name='e'
Range=[-800 400]
NumMFs=0

[Input3]
Name='Ie'
Range=[-150 150]
NumMFs=0

[Output1]
Name='PWM'
Range=[-800 800]
NumMFs=3
MF1='HP':'linear',[0.957 -0.5 0 -75.78]
MF2='LP':'linear',[0.46 -0.5 0 45.1]
MF3='Z':'constant',[0]

[Rules]
1 0 0, 2 (1) : 1
2 0 0, 1 (1) : 1
3 0 0, 3 (1) : 1
    }

    cfs = [
      0x43, 0x46, 0x53, 0x00, 0x00, 0x00, 0x03, 0x01,
      0x03, 0x00, 0x00, 0x00, 0x0a, 0x66, 0x0a, 0x66,
      0x0b, 0x33, 0x3f, 0xff, 0x00, 0x00, 0x0b, 0x33,
      0x3f, 0xff, 0x3f, 0xff, 0x3f, 0xff, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x0a, 0x66, 0x0a, 0x66,
      0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x00, 0x01,
      0x00, 0x00, 0x31, 0xce, 0x07, 0x5c, 0xe8, 0x00,
      0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x2c, 0xf8,
      0x0f, 0x50, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x03,
      0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00
    ]
    fuzzy_system = UFuzzyConvert::FuzzySystem.from_fis(fis)

    assert_equal cfs.join, fuzzy_system.to_cfs.join
  end

  def test_mamdani_1
    fis = %{
[System]
Name='tipper'
Type='mamdani'
NumInputs=1
NumOutputs=1
NumRules=3
AndMethod='min'
OrMethod='max'
ImpMethod='min'
AggMethod='max'
DefuzzMethod='centroid'

[Input1]
Name='service'
Range=[0 10]
NumMFs=3
MF1='poor':'trimf',[0 0 5]
MF2='good':'trimf',[0 5 10]
MF3='excellent':'trimf',[5 10 10]

[Output1]
Name='tip'
Range=[0 30]
NumMFs=3
MF1='cheap':'trimf',[0 5 10]
MF2='average':'trimf',[10 15 20]
MF3='generous':'trimf',[20 25 30]

[Rules]
1, 1 (1) : 1
2, 2 (1) : 1
3, 3 (1) : 1
    }

    cfs = [
      0x43, 0x46, 0x53, 0x00, 0x00, 0x00, 0x01, 0x01,
      0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x1f, 0xff, 0x00, 0x00, 0x00, 0x00,
      0x1f, 0xff, 0x1f, 0xff, 0x3f, 0xff, 0x00, 0x00,
      0x1f, 0xff, 0x3f, 0xff, 0x3f, 0xff, 0x3f, 0xff,
      0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x0a, 0xaa,
      0x0a, 0xaa, 0x15, 0x55, 0x00, 0x00, 0x15, 0x55,
      0x1f, 0xff, 0x1f, 0xff, 0x2a, 0xaa, 0x00, 0x00,
      0x2a, 0xaa, 0x35, 0x54, 0x35, 0x54, 0x3f, 0xff,
      0x00, 0x00, 0x00, 0x08, 0x00, 0x03, 0x00, 0x01,
      0x00, 0x00, 0x02, 0x01, 0x00, 0x03, 0x02, 0x00
    ]

    fuzzy_system = UFuzzyConvert::FuzzySystem.from_fis(fis)

    assert_equal cfs.join, fuzzy_system.to_cfs.join
  end
end
